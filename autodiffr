#include <TMB.hpp>

 template <class Type>
Type lla(vector<Type> eta_row, vector<Type> dfcost_row, Type rep){

  vector<Type> pi_i = exp(eta_row)/(1+exp(eta_row));
  Type l_a = 0;
  for(int h=0; h<rep; h++){
    if(dfcost_row(h) > 0){
      l_a += log(pi_i(h));
    }
    if(dfcost_row(h) == 0){
      l_a += log(1-pi_i(h));
    }
  }
    return l_a;
}  



// Likelihood for the amount of +ve medical cost
template <class Type>
Type llb(vector<Type> mu_row, vector<Type> sigma_row,Type kappa, vector<Type> dfcost_row,Type rep,Type costindexsum1,Type costsum1)
{ Type lik_b = 0;
  Type kappa_sq = kappa * kappa;
  
  if (costindexsum1 == 0) {
  lik_b = 0;
}

  if (costindexsum1 > 0) {
  Type lik_b1 = costindexsum1*(-lgamma(1/kappa_sq)-(1/2)*log(1/kappa_sq)) +(1/kappa_sq)*log(1/kappa_sq)- log(costsum1);    
  Type lik_b2 = 0;
  Type lik_b3 = 0;
  Type sigmasum = 0;
  for(int i=0; i<rep; i++){
    if (dfcost_row(i) > 0){
      
      lik_b2 += ((log(dfcost_row(i))-mu_row(i))/sigma_row(i)); 
   
      lik_b3 += (log(dfcost_row(i))-mu_row(i))/sigma_row(i);
      sigmasum += sigma_row(i);
    }
    }
    lik_b = lik_b1 +  (1/kappa) * lik_b2  - (1/kappa_sq) * exp(kappa*lik_b3) - log(sigmasum);}
 return lik_b;
}  
  



template <class Type>
Type cumhaz(vector<Type> Qpartition, Type survt_1, Type h1, Type h2, Type h3, Type h4, Type h5, Type h6, Type h7, Type h8, Type h9, Type h10, vector<Type> cumhaz_int,
            Type index){

  vector<Type> htilde(10);
  htilde(0)=h1;
  htilde(1)=h2;
  htilde(2)=h3;
  htilde(3)=h4;
  htilde(4)=h5;
  htilde(5)=h6;
  htilde(6)=h7;
  htilde(7)=h8;
  htilde(8)=h9;
  htilde(9)=h10;
  vector<Type> H = cumhaz_int * htilde;
  Type retval = 0;
  if (index == 0){
    retval = H(0);}
  if (index == 1){
    retval = H(0) + H(1);}
  if (index == 2){
    retval = H(0) + H(1) + H(2);}
  
  if (index == 3){
    retval = H(0) + H(1) + H(2) + H(3);}
  
  if (index == 4){
    retval = H(0) + H(1) + H(2) + H(3) + H(4);}
  
  if (index == 5){
    retval = H(0) + H(1) + H(2) + H(3) + H(4) + H(5);}
  
  if (index == 6){
    retval = H(0) + H(1) + H(2) + H(3) + H(4) + H(5) + H(6);}
  
  if (index == 7){
    retval = H(0) + H(1) + H(2) + H(3) + H(4) + H(5) + H(6) + H(7);}
  
  if (index == 8){
    retval = H(0) + H(1) + H(2) + H(3) + H(4) + H(5) + H(6) + H(7) + H(8);}
  
  if (index == 9){
    retval = H(0) + H(1) + H(2) + H(3) + H(4) + H(5) + H(6) + H(7) + H(8) + H(9);}
  

  return retval;}
  

  
// Likelihood for the survival submodel
 template <class Type>
Type llc(Type zeta1, Type h1, Type h2, Type h3, Type h4, Type h5, Type h6, Type h7, Type h8, Type h9, Type h10, Type survt_1, Type di_1, vector<Type> Qpartition, vector<Type> cumhaz_int,
         Type index){
  Type lik_c = 0;
  Type basehaz = 0;

  if(survt_1 <= Qpartition(1)){
    basehaz = h1;}
  if(survt_1 > Qpartition(1) && survt_1 <= Qpartition(2)){
    basehaz = h2;}
  if(survt_1 > Qpartition(2) && survt_1 <= Qpartition(3)){
    basehaz = h3;}

  if(survt_1 > Qpartition(3) && survt_1 <= Qpartition(4)){
    basehaz = h4;}
  if(survt_1 > Qpartition(4) && survt_1 <= Qpartition(5)){
    basehaz = h5;}
  
  if(survt_1 > Qpartition(5) && survt_1 <= Qpartition(6)){
    basehaz = h6;}
  if(survt_1 > Qpartition(6) && survt_1 <= Qpartition(7)){
    basehaz = h7;}
  
  if(survt_1 > Qpartition(7) && survt_1 <= Qpartition(8)){
    basehaz = h8;}

  if(survt_1 > Qpartition(8) && survt_1 <= Qpartition(9)){
    basehaz = h9;}
  
  if(survt_1 > Qpartition(9) && survt_1 <= Qpartition(10)){
    basehaz = h10;}
  
  lik_c = di_1 * (log(basehaz) + zeta1) - cumhaz(Qpartition, survt_1, h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,cumhaz_int,index) * exp(zeta1);
  return lik_c;  } 


// Joint likelihood  
template<class Type>
Type objective_function<Type>::operator() ()
{ 

  /* Data */
  DATA_MATRIX(Xrow);
  DATA_VECTOR(Z0);
  DATA_INTEGER(N);
  DATA_VECTOR(Qpartition);
  DATA_VECTOR(replicates);
  DATA_MATRIX(dfcost);
  DATA_VECTOR(survt1);
  DATA_VECTOR(di1);
  DATA_VECTOR(costindexsum);
  DATA_VECTOR(costsum);
  //DATA_VECTOR(interval);
  DATA_VECTOR(cumhaz_int);
  DATA_VECTOR(index_vec);
  DATA_INTEGER(maxrep);
  //DATA_VECTOR(weight);
  /* Parameters */
  PARAMETER_VECTOR(a1); 
  PARAMETER_VECTOR(b1); 
  PARAMETER(logsigma_a);
  PARAMETER(logsigma_b);
  PARAMETER(alpha0);
  PARAMETER(alpha1);
  PARAMETER(beta0);
  PARAMETER(beta1);
  PARAMETER(gamma);
  //PARAMETER(lambda1); now fixed to 1
  //PARAMETER(lambda2);
  //PARAMETER(lambda3);
  PARAMETER(kappa);
  PARAMETER(delta);
  PARAMETER(h1);
  PARAMETER(h2);
  PARAMETER(h3);
  PARAMETER(h4);
  PARAMETER(h5);
  PARAMETER(h6);
  PARAMETER(h7);
  PARAMETER(h8);
  PARAMETER(h9);
  PARAMETER(h10);
  //PARAMETER_VECTOR(htilde);
  

  /* Joint likelihood */
  

  
  
  Type jnll = Type(0.0);

   jnll -= sum(dnorm(a1, Type(0), exp(logsigma_a), true));
   
   jnll -= sum(dnorm(b1, Type(0), exp(logsigma_b), true));
  


  matrix<Type> eta(N,maxrep);
  matrix<Type> mu(N,maxrep);
  matrix<Type> sigma = Xrow*delta;
  matrix<Type> sigma_exp = exp(0.5*sigma.array()); // 0.5 
  
 
  
   for(int i=0; i<N; i++){
   Type rep = replicates(i);
   for(int j=0; j<rep; j++){
   eta(i,j) = Xrow(i,j)*alpha1 + alpha0 + a1(i);
   mu(i,j) = beta0 + Xrow(i,j)*beta1 + a1(i) + b1(i);

   }
   
  }  


  vector<Type> zeta = Z0*gamma + a1 + b1;
  
  
  

  //the joint negative log-likelihood
  for(int i=0; i<N; i++){

  vector<Type> eta_row = eta.row(i);
  vector<Type> dfcost_row = dfcost.row(i);
  Type rep = replicates(i);
  vector<Type> mu_row = mu.row(i);
  vector<Type> sigma_row = sigma_exp.row(i);
  Type costindexsum1 = costindexsum(i);
  Type costsum1 = costsum(i);
  Type index = index_vec(i);
  Type survt_1 = survt1(i);
  Type di_1 = di1(i);
  Type zeta1 = zeta(i);
  //Type weight1 = weight(i);
  
    
  jnll -= lla(eta_row,dfcost_row,rep)+ llb(mu_row,sigma_row,kappa,dfcost_row,rep,costindexsum1,costsum1) +llc(zeta1,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,survt_1,di_1,Qpartition, cumhaz_int, index);} 


  return jnll;
}



